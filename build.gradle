plugins {
    id "org.springframework.boot" version "2.1.9.RELEASE" apply(false)
    id "com.arenagod.gradle.MybatisGenerator" version "1.4" apply(false)
}
// 配置所有项目公有
allprojects {
    group = 'com.glacier'
    version = '0.0.1'

    ext {
        springBootVersion = "2.1.9.RELEASE"
        springCloudAlibabaVersion = "2.1.1.RELEASE"
        springCloudVersion = "Greenwich.SR3"
        mybatisGeneratorVersion = "1.4"

        swaggerVersion = '2.9.2'
        mybatisBootVersion = '2.1.0'
        druidVersion = '1.1.18'
        pageHelperVersion = "1.2.12"
        jacksonVersion = "2.9.9.3"
        lombokVersion = "1.18.10"
        oauth2Version = "2.1.9.RELEASE"
        jjwtVersion = "0.9.1"
        hutoolVersion = "5.1.2"
        mybatisPlusVersion = "3.3.1.tmp"
        kaptchaVersion = "1.1.0"
        springBootAdminVersion = "2.1.6"
    }

    // 指定仓库
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
    }
}
// 配置子项目
subprojects {
    apply plugin: 'java'

    // 指定jdk版本
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        // lombok
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        // 配置junit 4 单元测试
        testImplementation "junit:junit:4.12"
    }

    // 设置编码为UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    //配置 删除文件夹
    task cleanTempFiles() {
        println("delete $project out & logs")
        delete "out"
        delete "logs"
    }
    // 配置 创建源文件夹
    task mkdirs() {
        sourceSets*.java.srcDirs*.each {
            it.mkdirs()
        }
        sourceSets*.resources.srcDirs*.each {
            it.mkdirs()
        }
    }
}

// 配置指定子项目  spring cloud 模块
configure(
        subprojects.findAll {
            // 排除 common 模块
            !it.name.startsWith('common')
        }
) { Project project ->
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        // 导入依赖管理
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    dependencies {
        // spring boot
        // spring cloud gateway 非基于servet
        if (!project.name.startsWith("gateway")) {
            implementation(
                    "org.springframework.boot:spring-boot-starter-web"
            )
        }
        implementation(
                "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"
        )

        // swagger
        implementation(
                "io.springfox:springfox-swagger-ui:${swaggerVersion}",
                "io.springfox:springfox-swagger2:${swaggerVersion}"
        )

        implementation 'org.springframework.boot:spring-boot-actuator'
        runtimeOnly "org.springframework.boot:spring-boot-devtools"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }
}